generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([provider])
  @@index([type])
}

model Album {
  id               String        @id @default(cuid())
  title            String
  year             Int
  albumCid         String        @unique
  coverCid         String
  description      String
  totalTracks      Int
  totalDurationSec Int
  isPublic         Boolean       @default(true)
  playCount        BigInt        @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  artistProfileId  String
  artistId         String        // Campo adicional para compatibilidad
  genre            String
  uploadedAt       DateTime      @default(now())
  ArtistProfile    ArtistProfile @relation(fields: [artistProfileId], references: [id], onDelete: Cascade)
  Artist           ArtistProfile @relation("AlbumArtistId", fields: [artistId], references: [id], onDelete: Cascade)
  Track            Track[]

  @@index([isPublic])
  @@index([playCount(sort: Desc)])
  @@index([uploadedAt(sort: Desc)])
  @@index([genre])
}

model GlobalStats {
  id                String   @id
  totalArtists      Int      @default(0)
  totalAlbums       Int      @default(0)
  totalTracks       Int      @default(0)
  totalUsers        Int      @default(0)
  totalPlays        BigInt   @default(0)
  totalStorageBytes BigInt   @default(0)
  lastUpdated       DateTime @default(now())
}

model LibraryLike {
  id         String   @id
  userId     String
  targetType String
  targetId   String
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, targetType, targetId])
}

model Playlist {
  id           String         @id
  userId       String
  name         String
  isPublic     Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  PlaylistItem PlaylistItem[]
}

model PlaylistItem {
  id         String   @id
  playlistId String
  trackId    String
  position   Int
  createdAt  DateTime @default(now())
  Playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  Track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@index([playlistId, position])
}

model Session {
  id           String   @id
  userId       String
  sessionToken String   @unique
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Track {
  id             String         @id @default(cuid())
  albumId        String
  title          String
  durationSec    Int
  trackCid       String         @unique
  playCount      BigInt         @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  highQualityCid String
  lowQualityCid  String
  maxQualityCid  String
  trackNumber    Int
  PlaylistItem   PlaylistItem[]
  Album          Album          @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@index([trackNumber])
  @@index([playCount(sort: Desc)])
  @@index([albumId])
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  emailVerified DateTime?
  passwordHash  String?
  Account       Account[]
  ArtistProfile ArtistProfile?
  LibraryLike   LibraryLike[]
  Playlist      Playlist[]
  ProcessingJob ProcessingJob[]
  Session       Session[]
  UserProfile   UserProfile?

  @@index([emailVerified], map: "User_email_verified_idx")
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  username    String   @unique
  displayName String
  bio         String?
  avatarUrl   String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([username])
  @@index([isPublic])
}

model ArtistProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  artistName    String
  bio           String?
  isVerified    Boolean  @default(false)
  followerCount Int      @default(0)
  totalPlays    BigInt   @default(0)
  totalAlbums   Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Album         Album[]
  AlbumArtist   Album[]  @relation("AlbumArtistId")
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([artistName])
  @@index([isVerified])
  @@index([followerCount(sort: Desc)])
  @@index([totalPlays(sort: Desc)])
}

model ProcessingJob {
  id           String    @id @default(cuid())
  userId       String
  jobId        String    @unique
  status       String
  albumData    Json
  errorMessage String?
  createdAt    DateTime  @default(now())
  completedAt  DateTime?
  User         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([createdAt(sort: Desc)])
}
